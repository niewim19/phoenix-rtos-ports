diff -Naur micropython-1.15/ports/unix/alloc.c micropython-phoenix/ports/unix/alloc.c
--- micropython-1.15/ports/unix/alloc.c	2021-04-14 07:35:31.000000000 +0200
+++ micropython-phoenix/ports/unix/alloc.c	2021-04-14 13:27:45.000000000 +0200
@@ -49,21 +49,21 @@
     struct _mmap_region_t *next;
 } mmap_region_t;
 
-void mp_unix_alloc_exec(size_t min_size, void **ptr, size_t *size) {
-    // size needs to be a multiple of the page size
-    *size = (min_size + 0xfff) & (~0xfff);
-    *ptr = mmap(NULL, *size, PROT_READ | PROT_WRITE | PROT_EXEC, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
-    if (*ptr == MAP_FAILED) {
-        *ptr = NULL;
-    }
+// void mp_unix_alloc_exec(size_t min_size, void **ptr, size_t *size) {
+    // // size needs to be a multiple of the page size
+    // *size = (min_size + 0xfff) & (~0xfff);
+    // *ptr = mmap(NULL, *size, PROT_READ | PROT_WRITE | PROT_EXEC, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
+    // if (*ptr == MAP_FAILED) {
+    //     *ptr = NULL;
+    // }
 
-    // add new link to the list of mmap'd regions
-    mmap_region_t *rg = m_new_obj(mmap_region_t);
-    rg->ptr = *ptr;
-    rg->len = min_size;
-    rg->next = MP_STATE_VM(mmap_region_head);
-    MP_STATE_VM(mmap_region_head) = rg;
-}
+    // // add new link to the list of mmap'd regions
+    // mmap_region_t *rg = m_new_obj(mmap_region_t);
+    // rg->ptr = *ptr;
+    // rg->len = min_size;
+    // rg->next = MP_STATE_VM(mmap_region_head);
+    // MP_STATE_VM(mmap_region_head) = rg;
+// }
 
 void mp_unix_free_exec(void *ptr, size_t size) {
     munmap(ptr, size);
diff -Naur micropython-1.15/ports/unix/main.c micropython-phoenix/ports/unix/main.c
--- micropython-1.15/ports/unix/main.c	2021-04-14 07:35:31.000000000 +0200
+++ micropython-phoenix/ports/unix/main.c	2021-04-14 13:27:45.000000000 +0200
@@ -37,6 +37,7 @@
 #include <sys/types.h>
 #include <errno.h>
 #include <signal.h>
+#include <limits.h>
 
 #include "py/compile.h"
 #include "py/runtime.h"
@@ -52,6 +53,191 @@
 #include "genhdr/mpversion.h"
 #include "input.h"
 
+size_t
+strlcpy(char *dst, const char *src, size_t siz)
+{
+	char *d = dst;
+	const char *s = src;
+	size_t n = siz;
+	/* Copy as many bytes as will fit */
+	if (n != 0) {
+		while (--n != 0) {
+			if ((*d++ = *s++) == '\0')
+				break;
+		}
+  }
+	/* Not enough room in dst, add NUL and traverse rest of src */
+	if (n == 0) {
+		if (siz != 0)
+			*d = '\0';		/* NUL-terminate dst */
+		while (*s++)
+			;
+	}
+	return(s - src - 1);	/* count does not include NUL */
+}
+
+size_t
+strlcat(char * restrict dst, const char * restrict src, size_t maxlen) {
+    const size_t srclen = strlen(src);
+    const size_t dstlen = strnlen(dst, maxlen);
+    if (dstlen == maxlen) return maxlen+srclen;
+    if (srclen < maxlen-dstlen) {
+        memcpy(dst+dstlen, src, srclen+1);
+    } else {
+        memcpy(dst+dstlen, src, maxlen-1);
+        dst[dstlen+maxlen-1] = '\0';
+    }
+    return dstlen + srclen;
+}
+
+
+char *
+realpath(const char *path, char resolved[260])
+{
+	struct stat sb;
+	char *p, *q, *s;
+	size_t left_len, resolved_len;
+	unsigned symlinks;
+	int serrno, slen;
+	char left[260], next_token[260], symlink[260];
+
+	serrno = errno;
+	symlinks = 0;
+	if (path[0] == '/') {
+		resolved[0] = '/';
+		resolved[1] = '\0';
+		if (path[1] == '\0')
+			return (resolved);
+		resolved_len = 1;
+		left_len = strlcpy(left, path + 1, sizeof(left));
+	} else {
+		if (getcwd(resolved, 260) == NULL) {
+			strlcpy(resolved, ".", 260);
+			return (NULL);
+		}
+		resolved_len = strlen(resolved);
+		left_len = strlcpy(left, path, sizeof(left));
+	}
+	if (left_len >= sizeof(left) || resolved_len >= 260) {
+		errno = ENAMETOOLONG;
+		return (NULL);
+	}
+
+	/*
+	 * Iterate over path components in `left'.
+	 */
+	while (left_len != 0) {
+		/*
+		 * Extract the next path component and adjust `left'
+		 * and its length.
+		 */
+		p = strchr(left, '/');
+		s = p ? p : left + left_len;
+		if (s - left >= (long int)sizeof(next_token)) {
+			errno = ENAMETOOLONG;
+			return (NULL);
+		}
+		memcpy(next_token, left, s - left);
+		next_token[s - left] = '\0';
+		left_len -= s - left;
+		if (p != NULL)
+			memmove(left, s + 1, left_len + 1);
+		if (resolved[resolved_len - 1] != '/') {
+			if (resolved_len + 1 >= 260) {
+				errno = ENAMETOOLONG;
+				return (NULL);
+			}
+			resolved[resolved_len++] = '/';
+			resolved[resolved_len] = '\0';
+		}
+		if (next_token[0] == '\0')
+			continue;
+		else if (strcmp(next_token, ".") == 0)
+			continue;
+		else if (strcmp(next_token, "..") == 0) {
+			/*
+			 * Strip the last path component except when we have
+			 * single "/"
+			 */
+			if (resolved_len > 1) {
+				resolved[resolved_len - 1] = '\0';
+				q = strrchr(resolved, '/') + 1;
+				*q = '\0';
+				resolved_len = q - resolved;
+			}
+			continue;
+		}
+
+		/*
+		 * Append the next path component and lstat() it. If
+		 * lstat() fails we still can return successfully if
+		 * there are no more path components left.
+		 */
+		resolved_len = strlcat(resolved, next_token, 260);
+		if (resolved_len >= 260) {
+			errno = ENAMETOOLONG;
+			return (NULL);
+		}
+		if (lstat(resolved, &sb) != 0) {
+			if (errno == ENOENT && p == NULL) {
+				errno = serrno;
+				return (resolved);
+			}
+			return (NULL);
+		}
+		if (S_ISLNK(sb.st_mode)) {
+			if (symlinks++ > 8) {
+				errno = 40;
+				return (NULL);
+			}
+			slen = readlink(resolved, symlink, sizeof(symlink) - 1);
+			if (slen < 0)
+				return (NULL);
+			symlink[slen] = '\0';
+			if (symlink[0] == '/') {
+				resolved[1] = 0;
+				resolved_len = 1;
+			} else if (resolved_len > 1) {
+				/* Strip the last path component. */
+				resolved[resolved_len - 1] = '\0';
+				q = strrchr(resolved, '/') + 1;
+				*q = '\0';
+				resolved_len = q - resolved;
+			}
+
+			/*
+			 * If there are any path components left, then
+			 * append them to symlink. The result is placed
+			 * in `left'.
+			 */
+			if (p != NULL) {
+				if (symlink[slen - 1] != '/') {
+					if (slen + 1 >= (int)sizeof(symlink)) {
+						errno = ENAMETOOLONG;
+						return (NULL);
+					}
+					symlink[slen] = '/';
+					symlink[slen + 1] = 0;
+				}
+				left_len = strlcat(symlink, left, sizeof(left));
+				if (left_len >= sizeof(left)) {
+					errno = ENAMETOOLONG;
+					return (NULL);
+				}
+			}
+			left_len = strlcpy(left, symlink, sizeof(left));
+		}
+	}
+
+	/*
+	 * Remove trailing slash except when the resolved pathname
+	 * is a single "/".
+	 */
+	if (resolved_len > 1 && resolved[resolved_len - 1] == '/')
+		resolved[resolved_len - 1] = '\0';
+	return (resolved);
+}
+
 // Command line options, with their defaults
 STATIC bool compile_only = false;
 STATIC uint emit_opt = MP_EMIT_OPT_NONE;
@@ -643,7 +829,7 @@
                 return invalid_args();
             }
         } else {
-            char *pathbuf = malloc(PATH_MAX);
+            char *pathbuf = malloc(260);
             char *basedir = realpath(argv[a], pathbuf);
             if (basedir == NULL) {
                 mp_printf(&mp_stderr_print, "%s: can't open file '%s': [Errno %d] %s\n", argv[0], argv[a], errno, strerror(errno));
diff -Naur micropython-1.15/ports/unix/Makefile micropython-phoenix/ports/unix/Makefile
--- micropython-1.15/ports/unix/Makefile	2021-04-14 07:35:31.000000000 +0200
+++ micropython-phoenix/ports/unix/Makefile	2021-04-14 13:27:45.000000000 +0200
@@ -31,7 +31,7 @@
 # include py core make definitions
 include $(TOP)/py/py.mk
 
-GIT_SUBMODULES += lib/axtls lib/berkeley-db-1.xx lib/libffi
+GIT_SUBMODULES += lib/axtls lib/berkeley-db-1.xx
 
 INC +=  -I.
 INC +=  -I$(TOP)
@@ -103,17 +103,9 @@
 endif
 LDFLAGS += $(LDFLAGS_MOD) $(LDFLAGS_ARCH) -lm $(LDFLAGS_EXTRA)
 
-# Flags to link with pthread library
-LIBPTHREAD = -lpthread
-
 ifeq ($(MICROPY_FORCE_32BIT),1)
 # Note: you may need to install i386 versions of dependency packages,
 # starting with linux-libc-dev:i386
-ifeq ($(MICROPY_PY_FFI),1)
-ifeq ($(UNAME_S),Linux)
-CFLAGS_MOD += -I/usr/include/i686-linux-gnu
-endif
-endif
 endif
 
 ifeq ($(MICROPY_USE_READLINE),1)
@@ -129,10 +121,6 @@
 CFLAGS_MOD += -DMICROPY_PY_SOCKET=1
 SRC_MOD += modusocket.c
 endif
-ifeq ($(MICROPY_PY_THREAD),1)
-CFLAGS_MOD += -DMICROPY_PY_THREAD=1 -DMICROPY_PY_THREAD_GIL=0
-LDFLAGS_MOD += $(LIBPTHREAD)
-endif
 
 # If the variant enables it, enable modbluetooth.
 ifeq ($(MICROPY_PY_BLUETOOTH),1)
@@ -189,29 +177,6 @@
 
 endif
 
-ifeq ($(MICROPY_PY_FFI),1)
-
-ifeq ($(MICROPY_STANDALONE),1)
-LIBFFI_CFLAGS_MOD := -I$(shell ls -1d $(BUILD)/lib/libffi/out/lib/libffi-*/include)
- ifeq ($(MICROPY_FORCE_32BIT),1)
-  LIBFFI_LDFLAGS_MOD = $(BUILD)/lib/libffi/out/lib32/libffi.a
- else
-  LIBFFI_LDFLAGS_MOD = $(BUILD)/lib/libffi/out/lib/libffi.a
- endif
-else
-LIBFFI_CFLAGS_MOD := $(shell pkg-config --cflags libffi)
-LIBFFI_LDFLAGS_MOD := $(shell pkg-config --libs libffi)
-endif
-
-ifeq ($(UNAME_S),Linux)
-LIBFFI_LDFLAGS_MOD += -ldl
-endif
-
-CFLAGS_MOD += $(LIBFFI_CFLAGS_MOD) -DMICROPY_PY_FFI=1
-LDFLAGS_MOD += $(LIBFFI_LDFLAGS_MOD)
-SRC_MOD += modffi.c
-endif
-
 ifeq ($(MICROPY_PY_JNI),1)
 # Path for 64-bit OpenJDK, should be adjusted for other JDKs
 CFLAGS_MOD += -I/usr/lib/jvm/java-7-openjdk-amd64/include -DMICROPY_PY_JNI=1
@@ -223,7 +188,6 @@
 	main.c \
 	gccollect.c \
 	unix_mphal.c \
-	mpthreadport.c \
 	input.c \
 	modmachine.c \
 	modos.c \
@@ -299,7 +263,6 @@
 test_full: $(PROG) $(TOP)/tests/run-tests.py
 	$(eval DIRNAME=ports/$(notdir $(CURDIR)))
 	cd $(TOP)/tests && MICROPY_MICROPYTHON=../$(DIRNAME)/$(PROG) ./run-tests.py
-	cd $(TOP)/tests && MICROPY_MICROPYTHON=../$(DIRNAME)/$(PROG) ./run-tests.py -d thread
 	cd $(TOP)/tests && MICROPY_MICROPYTHON=../$(DIRNAME)/$(PROG) ./run-tests.py --emit native
 	cd $(TOP)/tests && MICROPY_MICROPYTHON=../$(DIRNAME)/$(PROG) ./run-tests.py --via-mpy $(RUN_TESTS_MPY_CROSS_FLAGS) -d basics float micropython
 	cd $(TOP)/tests && MICROPY_MICROPYTHON=../$(DIRNAME)/$(PROG) ./run-tests.py --via-mpy $(RUN_TESTS_MPY_CROSS_FLAGS) --emit native -d basics float micropython
@@ -317,20 +280,6 @@
 CROSS_COMPILE_HOST =
 endif
 
-deplibs: libffi axtls
-
-libffi: $(BUILD)/lib/libffi/include/ffi.h
-
-$(TOP)/lib/libffi/configure: $(TOP)/lib/libffi/autogen.sh
-	cd $(TOP)/lib/libffi; ./autogen.sh
-
-# install-exec-recursive & install-data-am targets are used to avoid building
-# docs and depending on makeinfo
-$(BUILD)/lib/libffi/include/ffi.h: $(TOP)/lib/libffi/configure
-	mkdir -p $(BUILD)/lib/libffi; cd $(BUILD)/lib/libffi; \
-	$(abspath $(TOP))/lib/libffi/configure $(CROSS_COMPILE_HOST) --prefix=$$PWD/out --disable-structs CC="$(CC)" CXX="$(CXX)" LD="$(LD)" CFLAGS="-Os -fomit-frame-pointer -fstrict-aliasing -ffast-math -fno-exceptions"; \
-	$(MAKE) install-exec-recursive; $(MAKE) -C include install-data-am
-
 axtls: $(TOP)/lib/axtls/README
 
 $(TOP)/lib/axtls/README:
diff -Naur micropython-1.15/ports/unix/modmachine.c micropython-phoenix/ports/unix/modmachine.c
--- micropython-1.15/ports/unix/modmachine.c	2021-04-14 07:35:31.000000000 +0200
+++ micropython-phoenix/ports/unix/modmachine.c	2021-04-14 13:27:45.000000000 +0200
@@ -77,13 +77,7 @@
     return addr;
 }
 
-#ifdef MICROPY_UNIX_MACHINE_IDLE
-STATIC mp_obj_t machine_idle(void) {
-    MICROPY_UNIX_MACHINE_IDLE
-    return mp_const_none;
-}
-MP_DEFINE_CONST_FUN_OBJ_0(machine_idle_obj, machine_idle);
-#endif
+
 
 STATIC const mp_rom_map_elem_t machine_module_globals_table[] = {
     { MP_ROM_QSTR(MP_QSTR___name__), MP_ROM_QSTR(MP_QSTR_umachine) },
@@ -92,9 +86,7 @@
     { MP_ROM_QSTR(MP_QSTR_mem16), MP_ROM_PTR(&machine_mem16_obj) },
     { MP_ROM_QSTR(MP_QSTR_mem32), MP_ROM_PTR(&machine_mem32_obj) },
 
-    #ifdef MICROPY_UNIX_MACHINE_IDLE
-    { MP_ROM_QSTR(MP_QSTR_idle), MP_ROM_PTR(&machine_idle_obj) },
-    #endif
+
 
     { MP_ROM_QSTR(MP_QSTR_PinBase), MP_ROM_PTR(&machine_pinbase_type) },
     { MP_ROM_QSTR(MP_QSTR_Signal), MP_ROM_PTR(&machine_signal_type) },
diff -Naur micropython-1.15/ports/unix/modos.c micropython-phoenix/ports/unix/modos.c
--- micropython-1.15/ports/unix/modos.c	2021-04-14 07:35:31.000000000 +0200
+++ micropython-phoenix/ports/unix/modos.c	2021-04-14 13:27:45.000000000 +0200
@@ -259,9 +259,9 @@
     #ifdef DTTOIF
     t->items[1] = MP_OBJ_NEW_SMALL_INT(DTTOIF(dirent->d_type));
     #else
-    if (dirent->d_type == DT_DIR) {
+    if (dirent->d_type == 4) {
         t->items[1] = MP_OBJ_NEW_SMALL_INT(MP_S_IFDIR);
-    } else if (dirent->d_type == DT_REG) {
+    } else if (dirent->d_type == 8) {
         t->items[1] = MP_OBJ_NEW_SMALL_INT(MP_S_IFREG);
     } else {
         t->items[1] = MP_OBJ_NEW_SMALL_INT(dirent->d_type);
diff -Naur micropython-1.15/ports/unix/modusocket.c micropython-phoenix/ports/unix/modusocket.c
--- micropython-1.15/ports/unix/modusocket.c	2021-04-14 07:35:31.000000000 +0200
+++ micropython-phoenix/ports/unix/modusocket.c	2021-04-14 13:27:45.000000000 +0200
@@ -33,6 +33,7 @@
 #include <sys/stat.h>
 #include <sys/types.h>
 #include <sys/socket.h>
+#include <sys/time.h>
 #include <netinet/in.h>
 #include <arpa/inet.h>
 #include <netdb.h>
@@ -47,6 +48,10 @@
 #include "py/mphal.h"
 #include "py/mpthread.h"
 
+#ifndef MSG_DONTROUTE
+#define MSG_DONTROUTE   0x04
+#endif
+
 /*
   The idea of this module is to implement reasonable minimum of
   socket-related functions to write typical clients and servers.
diff -Naur micropython-1.15/ports/unix/mpconfigport.h micropython-phoenix/ports/unix/mpconfigport.h
--- micropython-1.15/ports/unix/mpconfigport.h	2021-04-14 07:35:31.000000000 +0200
+++ micropython-phoenix/ports/unix/mpconfigport.h	2021-04-14 13:27:45.000000000 +0200
@@ -34,7 +34,7 @@
 // If we're building the minimal variant, ignore the rest of this file.
 #ifndef MICROPY_UNIX_MINIMAL
 
-#define MICROPY_ALLOC_PATH_MAX      (PATH_MAX)
+#define MICROPY_ALLOC_PATH_MAX      (260)
 #define MICROPY_PERSISTENT_CODE_LOAD (1)
 #if !defined(MICROPY_EMIT_X64) && defined(__x86_64__)
     #define MICROPY_EMIT_X64        (1)
@@ -137,9 +137,9 @@
 #define MICROPY_STACKLESS_STRICT    (0)
 #endif
 
-#define MICROPY_PY_OS_STATVFS       (1)
-#define MICROPY_PY_UTIME            (1)
-#define MICROPY_PY_UTIME_MP_HAL     (1)
+#define MICROPY_PY_OS_STATVFS       (0)
+#define MICROPY_PY_UTIME            (0)
+#define MICROPY_PY_UTIME_MP_HAL     (0)
 #define MICROPY_PY_UERRNO           (1)
 #define MICROPY_PY_UCTYPES          (1)
 #define MICROPY_PY_UZLIB            (1)
@@ -159,7 +159,7 @@
 #ifndef MICROPY_PY_USELECT_POSIX
 #define MICROPY_PY_USELECT_POSIX    (1)
 #endif
-#define MICROPY_PY_UWEBSOCKET       (1)
+#define MICROPY_PY_UWEBSOCKET       (0)
 #define MICROPY_PY_MACHINE          (1)
 #define MICROPY_PY_MACHINE_PULSE    (1)
 #define MICROPY_MACHINE_MEM_GET_READ_ADDR   mod_machine_mem_get_addr
@@ -202,7 +202,6 @@
 extern const struct _mp_obj_module_t mp_module_time;
 extern const struct _mp_obj_module_t mp_module_termios;
 extern const struct _mp_obj_module_t mp_module_socket;
-extern const struct _mp_obj_module_t mp_module_ffi;
 extern const struct _mp_obj_module_t mp_module_jni;
 
 #if MICROPY_PY_UOS_VFS
@@ -210,11 +209,6 @@
 #else
 #define MICROPY_PY_UOS_DEF { MP_ROM_QSTR(MP_QSTR_uos), MP_ROM_PTR(&mp_module_os) },
 #endif
-#if MICROPY_PY_FFI
-#define MICROPY_PY_FFI_DEF { MP_ROM_QSTR(MP_QSTR_ffi), MP_ROM_PTR(&mp_module_ffi) },
-#else
-#define MICROPY_PY_FFI_DEF
-#endif
 #if MICROPY_PY_JNI
 #define MICROPY_PY_JNI_DEF { MP_ROM_QSTR(MP_QSTR_jni), MP_ROM_PTR(&mp_module_jni) },
 #else
@@ -242,7 +236,6 @@
 #endif
 
 #define MICROPY_PORT_BUILTIN_MODULES \
-    MICROPY_PY_FFI_DEF \
     MICROPY_PY_JNI_DEF \
     MICROPY_PY_UTIME_DEF \
     MICROPY_PY_SOCKET_DEF \
@@ -276,20 +269,20 @@
 typedef long mp_off_t;
 #endif
 
-void mp_unix_alloc_exec(size_t min_size, void **ptr, size_t *size);
+// void mp_unix_alloc_exec(size_t min_size, void **ptr, size_t *size);
 void mp_unix_free_exec(void *ptr, size_t size);
 void mp_unix_mark_exec(void);
-#define MP_PLAT_ALLOC_EXEC(min_size, ptr, size) mp_unix_alloc_exec(min_size, ptr, size)
+// #define MP_PLAT_ALLOC_EXEC(min_size, ptr, size) mp_unix_alloc_exec(min_size, ptr, size)
 #define MP_PLAT_FREE_EXEC(ptr, size) mp_unix_free_exec(ptr, size)
 #ifndef MICROPY_FORCE_PLAT_ALLOC_EXEC
 // Use MP_PLAT_ALLOC_EXEC for any executable memory allocation, including for FFI
 // (overriding libffi own implementation)
-#define MICROPY_FORCE_PLAT_ALLOC_EXEC (1)
+// #define MICROPY_FORCE_PLAT_ALLOC_EXEC (1)
 #endif
 
 #ifdef __linux__
 // Can access physical memory using /dev/mem
-#define MICROPY_PLAT_DEV_MEM  (1)
+#define MICROPY_PLAT_DEV_MEM  (0)
 #endif
 
 // Assume that select() call, interrupted with a signal, and erroring
@@ -345,12 +338,12 @@
 // Other libc's don't define it, but proactively assume that dirent->d_type
 // is available on a modern *nix system.
 #ifndef _DIRENT_HAVE_D_TYPE
-#define _DIRENT_HAVE_D_TYPE (1)
+#define _DIRENT_HAVE_D_TYPE (0)
 #endif
 // This macro is not provided by glibc but we need it so ports that don't have
 // dirent->d_ino can disable the use of this field.
 #ifndef _DIRENT_HAVE_D_INO
-#define _DIRENT_HAVE_D_INO (1)
+#define _DIRENT_HAVE_D_INO (0)
 #endif
 
 #ifndef __APPLE__
@@ -371,6 +364,5 @@
     } while (0);
 
 #include <sched.h>
-#define MICROPY_UNIX_MACHINE_IDLE sched_yield();
 
 #endif // MICROPY_UNIX_MINIMAL
diff -Naur micropython-1.15/ports/unix/mpconfigport.mk micropython-phoenix/ports/unix/mpconfigport.mk
--- micropython-1.15/ports/unix/mpconfigport.mk	2021-04-14 07:35:31.000000000 +0200
+++ micropython-phoenix/ports/unix/mpconfigport.mk	2021-04-28 11:40:58.295583082 +0200
@@ -9,25 +9,25 @@
 MICROPY_USE_READLINE = 1
 
 # btree module using Berkeley DB 1.xx
-MICROPY_PY_BTREE = 1
+MICROPY_PY_BTREE = 0
 
 # _thread module using pthreads
-MICROPY_PY_THREAD = 1
+MICROPY_PY_THREAD = 0
 
 # Subset of CPython termios module
-MICROPY_PY_TERMIOS = 1
+MICROPY_PY_TERMIOS = 0
 
 # Subset of CPython socket module
 MICROPY_PY_SOCKET = 1
 
 # ffi module requires libffi (libffi-dev Debian package)
-MICROPY_PY_FFI = 1
+MICROPY_PY_FFI = 0
 
 # ussl module requires one of the TLS libraries below
-MICROPY_PY_USSL = 1
+MICROPY_PY_USSL = 0
 # axTLS has minimal size but implements only a subset of modern TLS
 # functionality, so may have problems with some servers.
-MICROPY_SSL_AXTLS = 1
+MICROPY_SSL_AXTLS = 0
 # mbedTLS is more up to date and complete implementation, but also
 # more bloated.
 MICROPY_SSL_MBEDTLS = 0
diff -Naur micropython-1.15/ports/unix/variants/coverage/frzmpy/frzmpy1.py micropython-phoenix/ports/unix/variants/coverage/frzmpy/frzmpy1.py
--- micropython-1.15/ports/unix/variants/coverage/frzmpy/frzmpy1.py	2021-04-14 07:35:31.000000000 +0200
+++ micropython-phoenix/ports/unix/variants/coverage/frzmpy/frzmpy1.py	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-print('frzmpy1')
diff -Naur micropython-1.15/ports/unix/variants/coverage/frzmpy/frzmpy2.py micropython-phoenix/ports/unix/variants/coverage/frzmpy/frzmpy2.py
--- micropython-1.15/ports/unix/variants/coverage/frzmpy/frzmpy2.py	2021-04-14 07:35:31.000000000 +0200
+++ micropython-phoenix/ports/unix/variants/coverage/frzmpy/frzmpy2.py	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-raise ZeroDivisionError
diff -Naur micropython-1.15/ports/unix/variants/coverage/frzmpy/frzmpy_pkg1/__init__.py micropython-phoenix/ports/unix/variants/coverage/frzmpy/frzmpy_pkg1/__init__.py
--- micropython-1.15/ports/unix/variants/coverage/frzmpy/frzmpy_pkg1/__init__.py	2021-04-14 07:35:31.000000000 +0200
+++ micropython-phoenix/ports/unix/variants/coverage/frzmpy/frzmpy_pkg1/__init__.py	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-# test frozen package with __init__.py
-print('frzmpy_pkg1.__init__')
-x = 1
diff -Naur micropython-1.15/ports/unix/variants/coverage/frzmpy/frzmpy_pkg2/mod.py micropython-phoenix/ports/unix/variants/coverage/frzmpy/frzmpy_pkg2/mod.py
--- micropython-1.15/ports/unix/variants/coverage/frzmpy/frzmpy_pkg2/mod.py	2021-04-14 07:35:31.000000000 +0200
+++ micropython-phoenix/ports/unix/variants/coverage/frzmpy/frzmpy_pkg2/mod.py	1970-01-01 01:00:00.000000000 +0100
@@ -1,4 +0,0 @@
-# test frozen package without __init__.py
-print('frzmpy_pkg2.mod')
-class Foo:
-    x = 1
diff -Naur micropython-1.15/ports/unix/variants/coverage/frzmpy/frzqstr.py micropython-phoenix/ports/unix/variants/coverage/frzmpy/frzqstr.py
--- micropython-1.15/ports/unix/variants/coverage/frzmpy/frzqstr.py	2021-04-14 07:35:31.000000000 +0200
+++ micropython-phoenix/ports/unix/variants/coverage/frzmpy/frzqstr.py	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-# Checks for regression on MP_QSTR_NULL
-def returns_NULL():
-    return "NULL"
diff -Naur micropython-1.15/ports/unix/variants/coverage/frzstr/frzstr1.py micropython-phoenix/ports/unix/variants/coverage/frzstr/frzstr1.py
--- micropython-1.15/ports/unix/variants/coverage/frzstr/frzstr1.py	2021-04-14 07:35:31.000000000 +0200
+++ micropython-phoenix/ports/unix/variants/coverage/frzstr/frzstr1.py	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-print('frzstr1')
diff -Naur micropython-1.15/ports/unix/variants/coverage/frzstr/frzstr_pkg1/__init__.py micropython-phoenix/ports/unix/variants/coverage/frzstr/frzstr_pkg1/__init__.py
--- micropython-1.15/ports/unix/variants/coverage/frzstr/frzstr_pkg1/__init__.py	2021-04-14 07:35:31.000000000 +0200
+++ micropython-phoenix/ports/unix/variants/coverage/frzstr/frzstr_pkg1/__init__.py	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-# test frozen package with __init__.py
-print('frzstr_pkg1.__init__')
-x = 1
diff -Naur micropython-1.15/ports/unix/variants/coverage/frzstr/frzstr_pkg2/mod.py micropython-phoenix/ports/unix/variants/coverage/frzstr/frzstr_pkg2/mod.py
--- micropython-1.15/ports/unix/variants/coverage/frzstr/frzstr_pkg2/mod.py	2021-04-14 07:35:31.000000000 +0200
+++ micropython-phoenix/ports/unix/variants/coverage/frzstr/frzstr_pkg2/mod.py	1970-01-01 01:00:00.000000000 +0100
@@ -1,4 +0,0 @@
-# test frozen package without __init__.py
-print('frzstr_pkg2.mod')
-class Foo:
-    x = 1
diff -Naur micropython-1.15/ports/unix/variants/coverage/manifest.py micropython-phoenix/ports/unix/variants/coverage/manifest.py
--- micropython-1.15/ports/unix/variants/coverage/manifest.py	2021-04-14 07:35:31.000000000 +0200
+++ micropython-phoenix/ports/unix/variants/coverage/manifest.py	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-freeze_as_str("frzstr")
-freeze_as_mpy("frzmpy")
diff -Naur micropython-1.15/ports/unix/variants/dev/manifest.py micropython-phoenix/ports/unix/variants/dev/manifest.py
--- micropython-1.15/ports/unix/variants/dev/manifest.py	2021-04-14 07:35:31.000000000 +0200
+++ micropython-phoenix/ports/unix/variants/dev/manifest.py	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-include("$(PORT_DIR)/variants/manifest.py")
-
-include("$(MPY_DIR)/extmod/uasyncio/manifest.py")
diff -Naur micropython-1.15/ports/unix/variants/manifest.py micropython-phoenix/ports/unix/variants/manifest.py
--- micropython-1.15/ports/unix/variants/manifest.py	2021-04-14 07:35:31.000000000 +0200
+++ micropython-phoenix/ports/unix/variants/manifest.py	2021-04-28 11:42:03.657319190 +0200
@@ -1,2 +0,0 @@
-freeze_as_mpy('$(MPY_DIR)/tools', 'upip.py')
-freeze_as_mpy('$(MPY_DIR)/tools', 'upip_utarfile.py', opt=3)
